name: Docker Build

on:
  workflow_dispatch:

jobs:
  versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        name: Get latest version
        shell: "bash --noprofile --norc {0}"
        run: |
          # Get latest version
          output="matrix=false"
          matrix=()
          versions=(7.4 8.0 $(curl --silent https://www.php.net/releases/\?json | jq -r '.[].supported_versions.[]'))
          latest=$(curl --silent https://www.php.net/releases/\?json | jq -r '.[].supported_versions.[]' | sort --version-sort | tail -n 1)
          for version in ${versions[@]}; do
              latestsemver="$(curl --silent https://hub.docker.com/v2/repositories/library/php/tags\?name\=${version}\&ordering\=last_updated\&page_size\=999 | jq -r '.results[].name' | grep -iv 'rc' | sort --version-sort | tail -n 1 | grep -Eo '[0-9]\.[0-9]\.[0-9]+')"
              latestfpmalpine="$(curl --silent https://hub.docker.com/v2/repositories/library/php/tags\?name\=${latestsemver}-fpm-alpine\&ordering\=last_updated\&page_size\=999 | jq -r '.results[].name' | grep -iv 'rc' | grep 'fpm-alpine$' | sort --version-sort | tail -n 1 | grep -Eo '[0-9]\.[0-9]\.[0-9]+')"
              current="$(curl --silent https://hub.docker.com/v2/repositories/xmpls/php/tags\?name\=${version}-fpm-alpine\&ordering\=last_updated\&page_size\=999 | jq -r '.results[].name' | grep -iv 'rc' | grep 'fpm-alpine$' | sort --version-sort | tail -n 1 | grep -Eo '[0-9]\.[0-9]\.[0-9]+')"
              if [ -z "$current" ] || [ $current != $latestfpmalpine ]; then
                matrix+=("$latestfpmalpine")
              fi
          done
          if [ ${#matrix[@]} -gt 0 ]; then
            matrixjson=$(jq -c -n '$ARGS.positional' --args "${matrix[@]}")
            output="matrix={\"php-version\":$(echo $matrixjson),\"latest\":$(echo $latest)}"
          fi
          echo $output >> $GITHUB_OUTPUT
  build-fpm:
    needs: versions
    if: needs.versions.outputs.matrix != 'false'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: ${{fromJson(needs.versions.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          flavor: |
            latest=false
            suffix=-fpm-alpine
          images: |
            xmpls/php
            ghcr.io/build-xmpls/php
          tags: |
            type=schedule
            type=semver,pattern={{version}},value=${{ matrix.php-version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ matrix.php-version }}
            type=semver,pattern={{major}},value=${{ matrix.php-version }}
            type=raw,value=latest,enable=${{ startsWith(matrix.php-version, matrix.latest) }}
            type=sha 
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            PHP_BASE_IMAGE=php:${{ matrix.php-version }}-fpm-alpine
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Update repo description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: xmpls/php
          short-description: ${{ github.event.repository.description }}
  build-cli:
    needs: versions
    if: needs.versions.outputs.matrix != 'false'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: ${{fromJson(needs.versions.outputs.matrix)}}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          flavor: |
            latest=false
            suffix=-fpm-alpine
          images: |
            xmpls/php
            ghcr.io/build-xmpls/php
          tags: |
            type=schedule
            type=semver,pattern={{version}},value=${{ matrix.php-version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ matrix.php-version }}
            type=semver,pattern={{major}},value=${{ matrix.php-version }}
            type=raw,value=latest,enable=${{ startsWith(matrix.php-version, matrix.latest) }}
            type=sha
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            PHP_BASE_IMAGE=php:${{ matrix.php-version }}-cli-alpine
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Update repo description
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: xmpls/php
          short-description: ${{ github.event.repository.description }}

